# Certificate Generation Script

This script allows you to generate root certificates that can be used to issue and sign x509 certificates. It also provides the functionality to create x509 certificates signed by the root certificate. Below is a breakdown of how the script works, the command-line parameters, and how to use it.

## Command-Line Parameters

The script accepts several command-line parameters that allow you to customize its behavior. Here are the command-line parameters defined in the script:

- `-d` or `--domain`: Specifies the name of the root certificate or domain. For the `generate_root_certificate` function, this parameter is used to name the root CA. For the `generate_x509_certificate` function, this parameter is used as the common name (CN) of the certificate.

- `-p` or `--path`: Specifies the path where certificate files will be stored. You can use this parameter to customize the directory where certificates are saved. The default path is set to './certs' in the shared configuration folder.

- `-i1`, `-i2`, `-i3`, `-d1`, `-d2`, `-d3`: These parameters are used to specify additional IP addresses and DNS names (Subject Alternative Names, or SANs) for the x509 certificate generated by the `generate_x509_certificate` function. You can provide up to three IP addresses and three DNS names.

## Generating a Root Certificate

### Function: `generate_root_certificate`

This function generates a root certificate that can be used as a certificate authority (CA). Here's how it works:

- You can specify the path where the certificate files will be stored using the `-p` or `--path` option. If not provided, the default path is used, which is the 'certs' directory in the shared configuration folder.
- You can specify the domain name for the root certificate using the `-d` or `--domain` option. If not provided, the script will prompt you for a name, which can be an organization name.

If an existing root certificate and key are found, the script will ask if you want to recreate them. If you choose to recreate the root certificate, the existing files are backed up, removed, and new root certificates are created.

The newly generated root certificate is essential for signing x509 certificates and should be installed in your web browser as a trusted root to avoid certificate mismatch errors.

## Generating an x509 Certificate

### Function: `generate_x509_certificate`

This function generates an x509 certificate and signs it with the root certificate generated using the `generate_root_certificate` function. Here's how it works:

- The script checks for the existence of a root certificate. If one doesn't exist, you have the option to create a self-signed certificate, but it's recommended to generate the root certificate first using the `generate_root_certificate` function.
- You can specify a custom path for the certificate files, the domain (common name), and additional information for the x509 certificate.

The script provides the option to add alternative names and IP addresses to the certificate. You can enter up to three of each.

The certificate is created with dynamic Subject Alternative Names (SANs) using a `csr.conf` file. The signing is performed using the root certificate created in the `generate_root_certificate` function. The generated certificate is suitable for securing web servers and other applications.

## Using the Script

The main routine of the script offers three options:

1. **Generate Root Certificate:** This option calls the `generate_root_certificate` function to create a root certificate.

2. **Generate X509 Certificate:** This option calls the `generate_x509_certificate` function to create an x509 certificate signed by the root certificate. You will be prompted for various certificate details.

3. **Exit:** This option allows you to exit the script.

Please note that the script expects a shared configuration directory named `SHARED_CONFIG_DIR` set to './certs'. You can modify this path according to your requirements. It's important to have the OpenSSL utility installed and accessible on your system for the script to work correctly.

Enjoy generating and managing your certificates with this script!
